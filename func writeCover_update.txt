func writeCover(sanAlbumFolder, name string, url string) error {
	covPath := filepath.Join(sanAlbumFolder, name+"."+config.CoverFormat)

	if config.CoverFormat == "original" {
		parts := strings.Split(url, "/")
		if len(parts) < 2 {
			return fmt.Errorf("invalid URL format: %s", url)
		}

		ext := parts[len(parts)-2]
		ext = ext[strings.LastIndex(ext, ".")+1:]

		covPath = filepath.Join(sanAlbumFolder, name+"."+ext)
	}

	exists, err := fileExists(covPath)
	if err != nil {
		fmt.Println("Failed to check if cover exists.")
		return err
	}
	if exists {
		return nil
	}

	// 确保 {w}x{h} 被替换为实际尺寸
	if config.CoverFormat == "png" {
		re := regexp.MustCompile(`\{w\}x\{h\}`)
		parts := re.Split(url, 2)
		if len(parts) < 2 {
			return fmt.Errorf("invalid URL format after regex split: %s", url)
		}
		url = parts[0] + config.CoverSize + strings.Replace(parts[1], ".jpg", ".png", 1)
	} else {
		// 如果不是 png 格式，确保替换 .png 或 .jpg 扩展名
		url = strings.Replace(url, "{w}x{h}", config.CoverSize, 1)
	}

	if config.CoverFormat == "original" {
		url = strings.Replace(url, "is1-ssl.mzstatic.com/image/thumb", "a5.mzstatic.com/us/r1000/0", 1)
		url = url[:strings.LastIndex(url, "/")]
	}

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")

	do, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer do.Body.Close()

	f, err := os.Create(covPath)
	if err != nil {
		return err
	}
	defer f.Close()

	_, err = io.Copy(f, do.Body)
	if err != nil {
		return err
	}

	return nil
}